library(Hmisc)
source("scripts/setup.R")
themeMod <- theme_bw() +
theme(legend.position = "none", axis.text.y = element_text(hjust = 1))
theme_set(themeMod)
myFill <- function(...){
scale_fill_manual(values = alpha(c("#5ab4ac","#d8b365", "#f5f5f5"),0.8),...)
}
scale_fill_discrete <- myFill
table_answers <- table_answers[table_answers$group != "none",]
View(table_answers)
satisfaction_before <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$profile_cycling_1)
names(satisfaction_before) <- c("participant", "city", "group", "satisfaction")
satisfaction_before$time <- "Before"
satisfaction_after <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$satisfaction_cycling)
names(satisfaction_after) <- c("participant", "city", "group", "satisfaction")
satisfaction_after$time <- "After"
answers_satisfaction_paired <- rbind(satisfaction_before, satisfaction_after)
satisfaction_competition <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Competition",]
satisfaction_competition_before <- answers_satisfaction_competition[answers_satisfaction_competition$time == "Before",]
satisfaction_competition_after <- answers_satisfaction_competition[answers_satisfaction_competition$time == "After",]
satisfaction_collaboration <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Collaboration",]
satisfaction_collaboration_before <- answers_satisfaction_collaboration[answers_satisfaction_collaboration$time == "Before",]
satisfaction_collaboration_after <- answers_satisfaction_collaboration[answers_satisfaction_collaboration$time == "After",]
satisfaction_before <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$profile_cycling_1)
names(satisfaction_before) <- c("participant", "city", "group", "satisfaction")
satisfaction_before$time <- "Before"
satisfaction_after <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$satisfaction_cycling)
names(satisfaction_after) <- c("participant", "city", "group", "satisfaction")
satisfaction_after$time <- "After"
answers_satisfaction_paired <- rbind(satisfaction_before, satisfaction_after)
satisfaction_competition <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Competition",]
satisfaction_competition_before <- satisfaction_before[answers_satisfaction_competition$time == "Before",]
satisfaction_competition_before <- satisfaction_before[satisfaction_before$time == "Before",]
satisfaction_competition_after <- satisfaction_before[satisfaction_before$time == "After",]
satisfaction_collaboration <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Collaboration",]
satisfaction_competition <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Competition",]
satisfaction_competition_before <- satisfaction_before[satisfaction_before$group == "Competition",]
satisfaction_competition <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Competition",]
satisfaction_competition_before <- satisfaction_before[satisfaction_before$group == "Competition",]
satisfaction_competition_after <- satisfaction_after[satisfaction_after$group == "Competition",]
satisfaction_collaboration <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Collaboration",]
satisfaction_collaboration_before <- satisfaction_before[satisfaction_before$group == "Collaboration",]
satisfaction_collaboration_after <- satisfaction_after[satisfaction_after$time == "Collaboration",]
satisfaction_collaboration
satisfaction_competition
satisfaction_competition_before
satisfaction_competition_after
satisfaction_collaboration
satisfaction_collaboration_before
satisfaction_collaboration_after
satisfaction_competition <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Competition",]
satisfaction_competition_before <- satisfaction_before[satisfaction_before$group == "Competition",]
satisfaction_competition_after <- satisfaction_after[satisfaction_after$group == "Competition",]
satisfaction_collaboration <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Collaboration",]
satisfaction_collaboration_before <- satisfaction_before[satisfaction_before$group == "Collaboration",]
satisfaction_collaboration_after <- satisfaction_after[satisfaction_after$time == "Collaboration",]
shapiro.test(satisfaction_before$satisfaction)
satisfaction_competition
satisfaction_collaboration_after
satisfaction_collaboration_after <- satisfaction_after[satisfaction_after$group == "Collaboration",]
satisfaction_collaboration_after
shapiro.test(satisfaction_before$satisfaction)
shapiro.test(satisfaction_after$satisfaction)
wilcox.test(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
t.test(answers_satisfaction_competition_before$satisfaction, answers_satisfaction_competition_after$satisfaction )
t.test(satisfaction_before$satisfaction, satisfaction_after$satisfaction )
t.test(satisfaction_competition_before$satisfaction, satisfaction_competition_after$satisfaction )
wilcox.test(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
wilcox.test(satisfaction_collaboration_before$satisfaction, satisfaction_collaboration_after$satisfaction)
wilcox.test(satisfaction_collaboration_before$satisfaction, satisfaction_collaboration_after$satisfaction)
wilcox.test(satisfaction_competition_before$satisfaction, satisfaction_competition_after$satisfaction)
wilcox.test(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
wilcox.test(satisfaction_collaboration_before$satisfaction, satisfaction_collaboration_after$satisfaction)
wilcox.test(satisfaction_competition_before$satisfaction, satisfaction_competition_after$satisfaction)
p_satisfaction_ba <- ggplot(data = answers_satisfaction_paired, aes(y = satisfaction, x = time))
p_satisfaction_ba + geom_boxplot()
p_satisfaction_comp + geom_boxplot()
p_competition + geom_boxplot()
p_collaboration + geom_boxplot()
out_before <- boxplot.stats(satisfaction_before$satisfaction)$out
out_before
out_before <- boxplot.stats(satisfaction_before$satisfaction)$out
satisfaction_before$satisfaction <- ifelse(satisfaction_before$satisfaction %in% out_before, NA, satisfaction_before$satisfaction)
satisfaction_before$satisfaction
out_after <- boxplot.stats(satisfaction_after$satisfaction)$out
out_after
out_after <- boxplot.stats(satisfaction_after$satisfaction)$out
satisfaction_after$satisfaction <- ifelse(satisfaction_after$satisfaction %in% out_after, NA, satisfaction_after$satisfaction)
answers_satisfaction_paired <- rbind(satisfaction_before, satisfaction_after)
wilcox.test(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
wilcox.test(satisfaction_collaboration_before$satisfaction, satisfaction_collaboration_after$satisfaction)
wilcox.test(satisfaction_competition_before$satisfaction, satisfaction_competition_after$satisfaction)
wilcox.test(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
wilcox.test(satisfaction_collaboration_before$satisfaction, satisfaction_collaboration_after$satisfaction)
wilcox.test(satisfaction_competition_before$satisfaction, satisfaction_competition_after$satisfaction)
p_satisfaction_ba <- ggplot(data = answers_satisfaction_paired, aes(y = satisfaction, x = time))
p_satisfaction_ba + geom_boxplot()
cohen.d(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
cohen.d(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
library(effsize)
cohen.d(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
cohen.d(satisfaction_before$satisfaction, satisfaction_after$satisfaction, na.rm = TRUE)
satisfaction_before <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$profile_cycling_1)
names(satisfaction_before) <- c("participant", "city", "group", "satisfaction")
satisfaction_before$time <- "Before"
satisfaction_after <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$satisfaction_cycling)
names(satisfaction_after) <- c("participant", "city", "group", "satisfaction")
satisfaction_after$time <- "After"
answers_satisfaction_paired <- rbind(satisfaction_before, satisfaction_after)
satisfaction_competition <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Competition",]
satisfaction_competition_before <- satisfaction_before[satisfaction_before$group == "Competition",]
satisfaction_competition_after <- satisfaction_after[satisfaction_after$group == "Competition",]
satisfaction_collaboration <- answers_satisfaction_paired[answers_satisfaction_paired$group == "Collaboration",]
satisfaction_collaboration_before <- satisfaction_before[satisfaction_before$group == "Collaboration",]
satisfaction_collaboration_after <- satisfaction_after[satisfaction_after$group == "Collaboration",]
shapiro.test(satisfaction_before$satisfaction)
shapiro.test(satisfaction_after$satisfaction)
shapiro.test(answers_satisfaction_collaboration_before$satisfaction)
shapiro.test(answers_satisfaction_collaboration_after$satisfaction)
fligner.test(satisfaction_before$satisfaction, satisfaction_after$satisfaction)
cohen.d(satisfaction_before$satisfaction, satisfaction_after$satisfaction, na.rm = TRUE)
out_before <- boxplot.stats(satisfaction_before$satisfaction)$out
satisfaction_before$satisfaction <- ifelse(satisfaction_before$satisfaction %in% out_before, NA, satisfaction_before$satisfaction)
out_after <- boxplot.stats(satisfaction_after$satisfaction)$out
satisfaction_after$satisfaction <- ifelse(satisfaction_after$satisfaction %in% out_after, NA, satisfaction_after$satisfaction)
answers_satisfaction_paired <- rbind(satisfaction_before, satisfaction_after)
cohen.d(satisfaction_before$satisfaction, satisfaction_after$satisfaction, na.rm = TRUE)
engagement_before <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$engagement_A1)
names(engagement_before) <- c("participant", "city", "group", "engagement")
engagement_before$time <- "Before"
engagement_after <- data.frame(table_answers$participant, table_answers$City, table_answers$group, table_answers$engagement_B1)
names(engagement_after) <- c("participant", "city", "group", "engagement")
engagement_after$time <- "After"
engagement_paired <- rbind(engagement_before, engagement_after)
engagement_competition <- engagement_paired[engagement_paired$group == "Competition",]
engagement_competition_before <- engagement_before[engagement_before$group == "Competition",]
engagement_competition_after <- engagement_after[engagement_after$group == "Competition",]
engagement_collaboration <- engagement_paired[engagement_paired$group == "Collaboration",]
engagement_collaboration_before <- engagement_before[engagement_before$group == "Collaboration",]
engagement_collaboration_after <- engagement_after[engagement_after$group == "Collaboration",]
engagement_competition
engagement_competition_before
engagement_competition_after
engagement_collaboration
engagement_collaboration_before
engagement_collaboration_after
shapiro.test(engagement_before$engagement)
shapiro.test(engagement_after$engagement)
shapiro.test(engagement_competition_before$engagement)
shapiro.test(engagement_competition_after$engagement)
shapiro.test(engagement_collaboration_before$engagement)
shapiro.test(engagement_collaboration_after$engagement)
fligner.test(engagement_before$engagement, engagement_after$engagement)
wilcox.test(engagement_before$engagement, engagement_after$engagement)
wilcox.test(engagement_collaboration_before$engagement, engagement_collaboration_after$engagement)
wilcox.test(engagement_competition_before$engagement, engagement_competition_after$engagement)
p_engagement <- ggplot(data = engagement_paired, aes(y = engagement, x = time))
p_engagement + geom_boxplot()
cohen.d(engagement_before$engagement, engagement_after$engagement, na.rm = TRUE)
engagement_before$engagement
wilcox.test(engagement_before$engagement, engagement_after$engagement)
wilcox.test(engagement_collaboration_before$engagement, engagement_collaboration_after$engagement)
wilcox.test(engagement_competition_before$engagement, engagement_competition_after$engagement)
out_before <- boxplot.stats(engagement_before$engagement)$out
engagement_before$engagement <- ifelse(engagement_before$engagement %in% out_before, NA, engagement_before$engagement)
out_before
engagement_before$engagement
out_after <- boxplot.stats(engagement_after$engagement)$out
out_after
out_after
engagement_after$engagement <- ifelse(engagement_after$engagement %in% out_after, NA, engagement_after$engagement)
engagement_after$engagement
engagement_paired <- rbind(engagement_before, engagement_after)
wilcox.test(engagement_before$engagement, engagement_after$engagement)
wilcox.test(engagement_collaboration_before$engagement, engagement_collaboration_after$engagement)
wilcox.test(engagement_competition_before$engagement, engagement_competition_after$engagement)
p_satisfaction_ba <- ggplot(data = engagement_paired, aes(y = engagement, x = time))
p_satisfaction_ba + geom_boxplot()
cohen.d(engagement_before$engagement, engagement_after$engagement, na.rm = TRUE)
library(ggplot2)
require(lubridate)
library(dplyr)
source("scripts/setup.R")
trips_joined$day_time <-  format ( strptime(trips_joined$trip_start, format= "%Y-%m-%dT%H:%M:%OS"), "%H:%M:%OS")
trips_joined$day_time <- strptime(trips_joined$day_time, format = "%H:%M:%OS")
trips_joined$hour_day <- hour(trips_joined$day_time) + minute(trips_joined$day_time) / 60.0
trips_joined$trip_length <- difftime( strptime(trips_joined$trip_stop, format= "%Y-%m-%dT%H:%M:%OS"), strptime(trips_joined$trip_start, format= "%Y-%m-%dT%H:%M:%OS"), units='mins')
trips_joined$trip_start_experiment <- difftime ( strptime(trips_joined$trip_start, format= "%Y-%m-%dT%H:%M:%OS"), strptime(trips_joined$questionnaire1, format= "%Y-%m-%dT%H:%M:%OS"), units='days')
trips_joined$trip_stop_experiment <- difftime( strptime(as.character(trips_joined$trip_stop), format= "%Y-%m-%dT%H:%M:%OS"), strptime(as.character(trips_joined$questionnaire1), format= "%Y-%m-%dT%H:%M:%OS") , units='days')
trips_joined$validation <- "No Valid"
trips_joined[which(trips_joined$trip_length >= 0.5 & trips_joined$trip_length <= 300.0),]$validation <- "Valid Time"
trips_joined[which(!is.na(trips_joined$length_raw) & trips_joined$length_raw > 30),]$validation <- "Valid Distance"
trips_joined[which(!is.na(trips_joined$length_raw) & trips_joined$length_raw > 30 & trips_joined$trip_length >= 0.5 & trips_joined$trip_length <= 300.0),]$validation <- "Valid"
trips_valid <- data.frame(trips_joined$participant, trips_joined$city, trips_joined$device, trips_joined$group, trips_joined$trip_count, trips_joined$trip_start,
trips_joined$trip_stop, trips_joined$trip_length, trips_joined$length_raw, trips_joined$length_sim, trips_joined$dif_length,
trips_joined$day_time, trips_joined$hour_day, trips_joined$trip_start_experiment, trips_joined$trip_stop_experiment, trips_joined$validation)
names(trips_valid) <- c("participant", "city", "device", "group", "trip_count", "trip_star", "trip_stop", "trip_length", "length_raw", "length_sim", "dif_length", "day_time", "hour_day",
"trip_start_experiment", "trip_stop_experiment", "validation")
trips_valid <- trips_valid[trips_valid$validation != "No Valid",]
range(trips_valid[trips_valid$validation == "Valid",]$trip_length)
p_valid <- ggplot(trips_valid, aes (x=group, fill=group))
p_valid + geom_histogram(stat = "count") + facet_grid(city ~ validation )
p_valid <- ggplot(trips_valid, aes (x=city, fill=group))
p_valid + geom_histogram(stat = "count")
p_valid <- ggplot(trips_valid, aes (x=city, fill=group))
p_valid + geom_histogram(stat = "count") + facet_grid(city ~ validation )
p_valid <- ggplot(trips_valid, aes (x=city, fill=validation))
p_valid + geom_histogram(stat = "count")
p_valid + geom_histogram(stat = "count") + theme(legend.position = "bottom")
p_length_t <- ggplot(trips_valid[trips_valid$validation != "Valid Distance",], aes(x=trip_length, color=group))
p_length_t + geom_density() +
geom_rug(aes(x = trip_length, y = 0), position = position_jitter(height = 0)) +
theme_bw() +
theme(legend.position = "bottom")
p_valid + geom_histogram(stat = "count")
p_length_t + geom_density()
p_length_t <- ggplot(trips_valid[trips_valid$validation != "Valid Distance" & trips_valid[trips_valid$group != "none"],], aes(x=trip_length, color=group))
p_length_t + geom_density() +
geom_rug(aes(x = trip_length, y = 0), position = position_jitter(height = 0)) +
theme_bw() +
theme(legend.position = "bottom")
p_length_t <- ggplot(trips_valid[trips_valid$validation != "Valid Distance" & trips_valid[trips_valid$group != "none",],], aes(x=trip_length, color=group))
trips_valid[trips_valid$group != "none",]
trips_valid[trips_valid$group != "none"
trips_valid[trips_valid$group != "none"
trips_valid[trips_valid$validation != "Valid Distance" & trips_valid$group != "none",]
p_length_t <- ggplot(trips_valid[trips_valid$validation != "Valid Distance" & trips_valid$group != "none",], aes(x=trip_length, color=group))
p_length_t + geom_density()
View(trips_valid)
trips_valid[trips_valid$validation != "Valid Distance" & trips_valid$validation != "Valid" & trips_valid$group != "none",]
trips_distance <- trips_valid[trips_valid$validation != "Valid Distance" & trips_valid$validation != "Valid" & trips_valid$group != "none",]
p_length_t <- ggplot(trips_distance, aes(x=trip_length, color=group))
p_length_t + geom_density()
p_length_t + geom_density() +
geom_rug(aes(x = trip_length, y = 0), position = position_jitter(height = 0)) +
theme_bw() +
theme(legend.position = "bottom")
p_length_t + geom_density() + theme(legend.position = "bottom")
p_length_t + geom_histogram(aes(x = trip_length, y = ..density..),
binwidth = 1, fill = "white", color = "black") +
geom_density(n=1028, bw=4.4) +
theme_bw() +
theme(legend.position = "bottom")
p_length_t + geom_histogram(aes(x = trip_length, y = ..density..),
binwidth = 20, fill = "white", color = "black") +
geom_density(n=1028, bw=4.4) +
theme_bw() +
theme(legend.position = "bottom")
p_length_t + geom_histogram(aes(x = trip_length, y = ..density..),
binwidth = 4.4, fill = "white", color = "black") +
geom_density(n=1028, bw=4.4) +
theme_bw() +
theme(legend.position = "bottom")
View(trips_distance)
trips_time <- trips_valid[trips_valid$validation != "Valid Time" & trips_valid$validation != "Valid" & trips_valid$group != "none",]
View(trips_time)
trips_time <- trips_valid[trips_valid$validation == "Valid Time" & trips_valid$validation == "Valid" & trips_valid$group != "none",]
View(trips_time)
trips_time <- trips_valid[trips_valid$validation == "Valid Time" | trips_valid$validation == "Valid" & trips_valid$group != "none",]
View(trips_time)
trips_time <- trips_valid[trips_valid$validation == "Valid Time" | trips_valid$validation == "Valid" & trips_valid$group != "none",]
p_length_t <- ggplot(trips_distance, aes(x=trip_length, color=group))
p_length_t + geom_density() + theme(legend.position = "bottom")
p_length_t + geom_histogram(aes(x = trip_length, y = ..density..),
binwidth = 4.4, fill = "white", color = "black") +
geom_density(n=1028, bw=4.4) +
theme_bw() +
theme(legend.position = "bottom")
d_competition <- density(as.numeric(trips_valid[trips_valid$group == "Competition",]$trip_length), from = 0.5, to = 60, n=1028, bw=4.4)
plot (d_competition)
d_collaboration <- density(as.numeric(trips_valid[trips_valid$group == "Collaboration",]$trip_length), from = 0.5, to = 60, n=1028, bw=4.4)
plot (d_collaboration)
plot(d_competition$y/d_collaboration$y, type="l")
plot(d_competition$x/d_collaboration$x, type="l")
p_length_t + geom_density(xlim = c(0,60)) + theme(legend.position = "bottom")
p_length_t + geom_histogram(aes(x = trip_length, y = ..density..),
binwidth = 4.4, fill = "white", color = "black", xlim = c(0,60)) +
geom_density(n=1028, bw=4.4) +
theme_bw() +
theme(legend.position = "bottom")
View(table_participants)
table_participants = read.csv('data/Cyclist_Experiment.csv')
table_trips = read.csv('data/Cyclist_Trip.csv', sep = '\t')
table_location = read.csv('data/Cyclist_Location.csv', sep = '\t')
table_trips_length = read.csv('data/Cyclist_Trip_length.csv')
table_answers = read.csv('data/Questionnaire_Answers.csv')
table_answers$group <- "none"
table_answers[which(table_answers$competition_1 >= -3),]$group <- "Competition"
table_answers[which(table_answers$collaboration_1 >= -3),]$group <- "Collaboration"
trips_joined <- merge(table_trips, table_participants)
trips_joined <- merge(trips_joined, table_trips_length, all.x = TRUE)
trips_joined <- merge(trips_joined, table_answers)
location_joined <- merge(table_location, table_participants, all.y = TRUE)
View(location_joined)
location_joined <- merge (location_joined, table_answers, all.x = TRUE)
View(location_joined)
location_record <- data.frame(location_joined$participant, location_joined$device, location_joined$time_gps, location_joined$questionnaire1, location_joined$questionnaire_2,
location_joined$application_install, location_joined$longitude, location_joined$latitude, location_joined$altitude, location_joined$precision,
location_joined$city, location_joined$dem_gender, location_joined$dem_age, location_joined$group)
names(location_record) <- c("participant", "device", "time_gps", "questionnaire_1", "questionnaire_2", "application_install", "longitude", "latitude", "longitude", "altitude", "precision",
"city", "gender", "age", "group")
names(location_record) <- c("participant", "device", "time_gps", "questionnaire_1", "questionnaire_2", "application_install", "longitude", "latitude", "altitude", "precision",
"city", "gender", "age", "group")
View(location_record)
location_aggregated <- location_record %>% group_by("device") %>% sumarise(B = count(time_gps))
location_aggregated <- location_record %>% group_by("device") %>% summarise(B = count(time_gps))
location_aggregated <- location_record %>% group_by("device") %>% summarise(B = count(longitude))
location_aggregated <- location_record %>% group_by(device) %>% summarise(B = count(longitude))
location_record <- data.frame(location_joined$participant, location_joined$device, location_joined$time_gps, location_joined$questionnaire1, location_joined$questionnaire_2,
location_joined$application_install, location_joined$longitude, location_joined$latitude, location_joined$altitude, location_joined$precision,
location_joined$city, location_joined$dem_gender, location_joined$dem_age, location_joined$group)
names(location_record) <- c("participant", "device", "time_gps", "questionnaire_1", "questionnaire_2", "application_install", "longitude", "latitude", "altitude", "precision",
"city", "gender", "age", "group")
location_aggregated <- location_record %>% group_by(device) %>% summarise(B = count(longitude))
p_location <- ggplot(location_record, aes(x=device, group=device)))
p_location + geom_histogram(stat = "count")
location_record <- data.frame(location_joined$participant, location_joined$device, location_joined$time_gps, location_joined$questionnaire1, location_joined$questionnaire_2,
location_joined$application_install, location_joined$longitude, location_joined$latitude, location_joined$altitude, location_joined$precision,
location_joined$city, location_joined$dem_gender, location_joined$dem_age, location_joined$group)
names(location_record) <- c("participant", "device", "time_gps", "questionnaire_1", "questionnaire_2", "application_install", "longitude", "latitude", "altitude", "precision",
"city", "gender", "age", "group")
location_aggregated <- location_record %>% group_by(device) %>% summarise(B = count(longitude))
p_location <- ggplot(location_record, aes(x=device, group=device)))
p_location + geom_histogram(stat = "count")
p_location <- ggplot(location_record, aes(x=device, group=device))
p_location + geom_histogram(stat = "count")
p_location <- ggplot(location_record, aes(y=device, group=device))
p_location + geom_histogram(stat = "count")
p_location <- ggplot(location_record, aes(x=device, group=device))
p_location + geom_histogram(stat = "count")
p_location + geom_histogram(stat = "count") + coord_flip()
location_count <- count(location_count,"device")
location_count <- count(location_count,"device")
location_count <- count(location_record,"device")
View(location_count)
location_count <- n_distinct(location_record,"device")
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count
location_count <- n_distinct(location_record,'device')
location_count
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
location_count <- n_distinct(location_record,'device')
p_location + geom_histogram(stat = "count", order_by('count')) + coord_flip()
p_location
location_count <- unique(location_record,'device')
location_count
location_count <- unique(location_record,'device')
location_count
p_location + geom_histogram(stat = "count", sort = TRURE) + coord_flip()
p_location + geom_histogram(stat = "count", sort = TRUE) + coord_flip()
trips_joined$day_time <-  format ( strptime(trips_joined$trip_start, format= "%Y-%m-%dT%H:%M:%OS"), "%H:%M:%OS")
p_location + geom_bar(stat = "count", sort = TRUE) + coord_flip()
location_count <- table(location_record)
location_count
location_count <- aggregate(location_record)
location_count <- aggregate(location_record, by(device))
location_count <- aggregate(location_record, by(device), FUN = count)
location_count <- aggregate(location_record, by("device"), FUN = count)
location_count <- aggregate(location_record, by("device"), FUN = "count")
location_count <- aggregate(location_record, by("device"), FUN = sum)
location_count <- aggregate(location_record, BY =device, FUN = sum)
location_count <- aggregate(location_record, by =device, FUN = sum)
location_count <- aggregate(location_record, by = "device", FUN = sum)
location_count <- count(location_record, c("device"))
location_count
location_count <- count(location_record, c("device", "city"))
location_count
location_count <- count(location_record, c( "city"))
location_count
location_count <- count(location_record, c( city))
location_count
location_count <- count(location_record, city)
location_count
location_count <- count(location_record, c(city, device))
location_count <- count(location_record, by=(device))
location_count
View(location_count)
p_location <- ggplot(location_count, aes(x=by, y=count))
p_location + geom_bar() + coord_flip()
p_location <- ggplot(location_count, aes(x=by))
p_location + geom_bar(y=count) + coord_flip()
p_location + geom_bar(y=n) + coord_flip()
p_location <- ggplot(location_count, aes(x=by, y=n))
p_location + geom_bar(y=n) + coord_flip()
p_location + geom_bar() + coord_flip()
p_location + geom_point() + coord_flip()
location_count.order_by(n)
location_count[order(n)]
location_count[order(n),]
location_count
location_count[order(by),]
location_count[order(location_count$by),]
location_count[order(location_count$n),]
location_count <- location_count[order(location_count$n),]
p_location <- ggplot(location_count, aes(x=by, y=n))
p_location + geom_point() + coord_flip()
location_count
p_location <- ggplot(location_count, aes(x=by, y=n))
p_location + geom_point() + coord_flip()
p_location <- ggplot(location_count, aes(x=by, y=n, color=city))
p_location + geom_point() + coord_flip()
p_location <- ggplot(location_count, aes(x=by, y=n, group=city))
p_location + geom_point() + coord_flip()
location_count <- count(location_record, by=(device, city))
location_count <- location_count[order(location_count$n),]
location_count <- count(location_record, by=(device, city))
location_count <- count(location_record, by=(device))
location_count <- location_count[order(location_count$n),]
p_location <- ggplot(location_count, aes(x=by, y=n, group=city))
p_location + geom_point() + coord_flip()
, group=city
p_location <- ggplot(location_count, aes(x=by, y=n))
p_location + geom_point() + coord_flip()
location_count <- count(location_record, by=(device))
location_count
location_count <- location_count[order(location_count$n),]
location_count
p_location <- ggplot(location_count, aes(x=by, y=n))
p_location + geom_point() + coord_flip()
View(location_count)
p_location + geom_bar() + coord_flip()
p_location + geom_bar(stat = 'identity') + coord_flip()
location_count <- count(location_record, by=(device))
location_count
location_count <- location_count[order(location_count$n),]
location_count
p_location <- ggplot(location_count, aes(x=by, y=n))
p_location + geom_bar(stat = 'identity') + coord_flip()
p_location + geom_bar(stat = 'identity') + coord_flip() labs(y='n',x='by')
View(location_count)
p_location + geom(stat = 'identity') + coord_flip() labs(y='n',x='by')
p_location <- ggplot(location_count_ordered, aes(x=by, y=n))
p_location + geom(stat = 'identity') + coord_flip() labs(y='n',x='by')
p_location + geom(stat = 'identity') + coord_flip() + labs(y='n',x='by')
p_location + geom_bar(stat = 'identity') + coord_flip() + labs(y='n',x='by')
location_count_ordered <- location_count[order(location_count$n),]
p_location <- ggplot(location_count_ordered, aes(x=by, y=n))
p_location
p_location + geom_bar(stat = 'identity') + coord_flip() + labs(y='n',x='by')
location_count_ordered
p_location <- ggplot(location_count_ordered, aes(x=by, y=reorder(n)))
p_location + geom_bar(stat = 'identity') + coord_flip()
p_location <- ggplot(location_count_ordered, aes(x=by, y=reorder(n, -value)))
p_location + geom_bar(stat = 'identity') + coord_flip()
p_location <- ggplot(location_count_ordered, aes(x=reorder(n), y=by))
p_location + geom_bar(stat = 'identity') + coord_flip()
p_location <- ggplot(location_count_ordered, aes(x=reorder(n), y=by))
p_location + geom_bar(stat = 'identity')
p_location <- ggplot(location_count, aes(x=n, y=by))
p_location + geom_bar(stat = 'identity')
p_location <- ggplot(location_count, aes(x=by))
p_location + geom_bar(stat = 'identity')
p_location <- ggplot(location_count, aes(x=by, y=n))
p_location + geom_bar(stat = 'identity')
p_location <- ggplot(location_count, aes(x=by, y=reorder(n)))
p_location + geom_bar(stat = 'identity')
p_location <- ggplot(location_count, aes(x=by, y=reorder(n, value)))
p_location + geom_bar(stat = 'identity')
p_location <- ggplot(location_count, aes(x=by, y=reorder(by, n)))
p_location + geom_bar(stat = 'identity')
p_location + geom_bar(stat = 'identity') + coord_flip()
p_location <- ggplot(location_count, aes(x=reorder(by,n), y=n))
p_location + geom_bar(stat = 'identity') + coord_flip()
average(location_count$n)
avg(location_count$n)
mean(location_count$n)
p_location + geom_bar(stat = 'identity') + geom_line(y=mean(n)) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_line(y=1000) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_line(x=by, y=1000) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_hline(yintercept = 50) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_hline(yintercept = mean(n)) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_hline(yintercept = mean(location_count$n)) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_hline(yintercept = n) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_hline(yintercept = mean(n)) + coord_flip()
p_location + geom_bar(stat = 'identity') + geom_hline(yintercept = mean(location_count$n)) + coord_flip()
View(table_participants)
